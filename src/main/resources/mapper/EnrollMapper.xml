<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.billiard.dao.EnrollMapper">
	<resultMap id="BaseResultMap" type="com.billiard.entity.Enroll">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="
surname" jdbcType="VARCHAR" property="
surname" />
		<result column="user_name" jdbcType="VARCHAR" property="userName" />
		<result column="user_id" jdbcType="VARCHAR" property="userId" />
		<result column="sex" jdbcType="INTEGER" property="sex" />
		<result column="birthday" jdbcType="VARCHAR" property="birthday" />
		<result column="phone" jdbcType="VARCHAR" property="phone" />
		<result column="head_image" jdbcType="VARCHAR" property="headImage" />
		<result column="email" jdbcType="VARCHAR" property="email" />
		<result column="enroll_cost" jdbcType="INTEGER" property="enrollCost" />
		<result column="certificate_image" jdbcType="VARCHAR" property="certificateImage" />
		<result column="enroll_type" jdbcType="INTEGER" property="enrollType" />
		<result column="user_type" jdbcType="INTEGER" property="userType" />
		<result column="match_id" jdbcType="VARCHAR" property="matchId" />
		<result column="is_hidden" jdbcType="BIT" property="isHidden" />
		<result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id,
		surname, user_name, user_id, sex, birthday, phone, head_image, email,
		enroll_cost,
		certificate_image, enroll_type, user_type, match_id, is_hidden, create_time
	</sql>
	<select id="selectByExample" parameterType="com.billiard.entity.EnrollExample"
		resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from t_enroll
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_enroll
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from t_enroll
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.billiard.entity.EnrollExample">
		delete from t_enroll
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.billiard.entity.Enroll">
		insert into t_enroll (id,
		surname, user_name,
		user_id, sex, birthday,
		phone, head_image, email,
		enroll_cost, certificate_image, enroll_type,
		user_type, match_id, is_hidden,
		create_time)
		values (#{id,jdbcType=INTEGER}, #{
		surname,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR},
		#{userId,jdbcType=VARCHAR}, #{sex,jdbcType=INTEGER}, #{birthday,jdbcType=VARCHAR},
		#{phone,jdbcType=VARCHAR}, #{headImage,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR},
		#{enrollCost,jdbcType=INTEGER}, #{certificateImage,jdbcType=VARCHAR}, #{enrollType,jdbcType=INTEGER},
		#{userType,jdbcType=INTEGER}, #{matchId,jdbcType=VARCHAR},
		#{isHidden,jdbcType=BIT},
		#{createTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="com.billiard.entity.Enroll">
		insert into t_enroll
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="
surname != null">

				surname,
			</if>
			<if test="userName != null">
				user_name,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="birthday != null">
				birthday,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="headImage != null">
				head_image,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="enrollCost != null">
				enroll_cost,
			</if>
			<if test="certificateImage != null">
				certificate_image,
			</if>
			<if test="enrollType != null">
				enroll_type,
			</if>
			<if test="userType != null">
				user_type,
			</if>
			<if test="matchId != null">
				match_id,
			</if>
			<if test="isHidden != null">
				is_hidden,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="
surname != null">
				#{
				surname,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				#{userName,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=INTEGER},
			</if>
			<if test="birthday != null">
				#{birthday,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				#{phone,jdbcType=VARCHAR},
			</if>
			<if test="headImage != null">
				#{headImage,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="enrollCost != null">
				#{enrollCost,jdbcType=INTEGER},
			</if>
			<if test="certificateImage != null">
				#{certificateImage,jdbcType=VARCHAR},
			</if>
			<if test="enrollType != null">
				#{enrollType,jdbcType=INTEGER},
			</if>
			<if test="userType != null">
				#{userType,jdbcType=INTEGER},
			</if>
			<if test="matchId != null">
				#{matchId,jdbcType=VARCHAR},
			</if>
			<if test="isHidden != null">
				#{isHidden,jdbcType=BIT},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.billiard.entity.EnrollExample"
		resultType="java.lang.Long">
		select count(*) from t_enroll
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update t_enroll
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.
surname != null">

				surname = #{record.
				surname,jdbcType=VARCHAR},
			</if>
			<if test="record.userName != null">
				user_name = #{record.userName,jdbcType=VARCHAR},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=VARCHAR},
			</if>
			<if test="record.sex != null">
				sex = #{record.sex,jdbcType=INTEGER},
			</if>
			<if test="record.birthday != null">
				birthday = #{record.birthday,jdbcType=VARCHAR},
			</if>
			<if test="record.phone != null">
				phone = #{record.phone,jdbcType=VARCHAR},
			</if>
			<if test="record.headImage != null">
				head_image = #{record.headImage,jdbcType=VARCHAR},
			</if>
			<if test="record.email != null">
				email = #{record.email,jdbcType=VARCHAR},
			</if>
			<if test="record.enrollCost != null">
				enroll_cost = #{record.enrollCost,jdbcType=INTEGER},
			</if>
			<if test="record.certificateImage != null">
				certificate_image = #{record.certificateImage,jdbcType=VARCHAR},
			</if>
			<if test="record.enrollType != null">
				enroll_type = #{record.enrollType,jdbcType=INTEGER},
			</if>
			<if test="record.userType != null">
				user_type = #{record.userType,jdbcType=INTEGER},
			</if>
			<if test="record.matchId != null">
				match_id = #{record.matchId,jdbcType=VARCHAR},
			</if>
			<if test="record.isHidden != null">
				is_hidden = #{record.isHidden,jdbcType=BIT},
			</if>
			<if test="record.createTime != null">
				create_time = #{record.createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update t_enroll
		set id = #{record.id,jdbcType=INTEGER},

		surname = #{record.
		surname,jdbcType=VARCHAR},
		user_name = #{record.userName,jdbcType=VARCHAR},
		user_id = #{record.userId,jdbcType=VARCHAR},
		sex = #{record.sex,jdbcType=INTEGER},
		birthday = #{record.birthday,jdbcType=VARCHAR},
		phone = #{record.phone,jdbcType=VARCHAR},
		head_image = #{record.headImage,jdbcType=VARCHAR},
		email = #{record.email,jdbcType=VARCHAR},
		enroll_cost = #{record.enrollCost,jdbcType=INTEGER},
		certificate_image = #{record.certificateImage,jdbcType=VARCHAR},
		enroll_type = #{record.enrollType,jdbcType=INTEGER},
		user_type = #{record.userType,jdbcType=INTEGER},
		match_id = #{record.matchId,jdbcType=VARCHAR},
		is_hidden = #{record.isHidden,jdbcType=BIT},
		create_time = #{record.createTime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.billiard.entity.Enroll">
		update t_enroll
		<set>
			<if test="
surname != null">

				surname = #{
				surname,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				user_name = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=INTEGER},
			</if>
			<if test="birthday != null">
				birthday = #{birthday,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="headImage != null">
				head_image = #{headImage,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="enrollCost != null">
				enroll_cost = #{enrollCost,jdbcType=INTEGER},
			</if>
			<if test="certificateImage != null">
				certificate_image = #{certificateImage,jdbcType=VARCHAR},
			</if>
			<if test="enrollType != null">
				enroll_type = #{enrollType,jdbcType=INTEGER},
			</if>
			<if test="userType != null">
				user_type = #{userType,jdbcType=INTEGER},
			</if>
			<if test="matchId != null">
				match_id = #{matchId,jdbcType=VARCHAR},
			</if>
			<if test="isHidden != null">
				is_hidden = #{isHidden,jdbcType=BIT},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.billiard.entity.Enroll">
		update t_enroll
		set
		surname = #{
		surname,jdbcType=VARCHAR},
		user_name = #{userName,jdbcType=VARCHAR},
		user_id = #{userId,jdbcType=VARCHAR},
		sex = #{sex,jdbcType=INTEGER},
		birthday = #{birthday,jdbcType=VARCHAR},
		phone = #{phone,jdbcType=VARCHAR},
		head_image = #{headImage,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		enroll_cost = #{enrollCost,jdbcType=INTEGER},
		certificate_image = #{certificateImage,jdbcType=VARCHAR},
		enroll_type = #{enrollType,jdbcType=INTEGER},
		user_type = #{userType,jdbcType=INTEGER},
		match_id = #{matchId,jdbcType=VARCHAR},
		is_hidden = #{isHidden,jdbcType=BIT},
		create_time = #{createTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>


	<select id="selectEnrollInfo" parameterType="com.billiard.entity.Enroll"
		resultType="HashMap">
		SELECT
		t_enroll.*, t_match.enroll_cost cost,
		t_match.match_del,t_match.match_name,
		t_match.is_end,
		t_user.isStop,
		CASE t_match.is_end
		WHEN 1 THEN
		'已结束'
		ELSE
		CASE t_enroll.enroll_type
		WHEN 1 THEN
		'待付款'
		WHEN 2 THEN
		'待审核'
		WHEN 3 THEN
		'审核通过'
		WHEN 4 THEN
		'审核拒绝'
		ELSE
		'待付款'
		END
		END user_status
		FROM
		t_enroll
		JOIN t_user ON t_enroll.user_id = t_user.id
		JOIN t_match ON t_match.id = t_enroll.match_id
		<where>
			<trim prefixOverrides="and" suffixOverrides=",">
				<if test="userId != null and userId != ''">
					and t_enroll.user_id = #{userId}
				</if>
				<if test="matchId != null and matchId != ''">
					and t_enroll.match_id = #{matchId}
				</if>
				<if test="userType != null">
					and t_match.is_end = #{userType}
				</if>
				<if test="enrollType != null">
					and t_enroll.enroll_type = #{enrollType}
				</if>
				<if test="phone != null and phone != ''">
					and t_enroll.phone LIKE concat(concat('%',#{phone}),'%')
				</if>
				<if test="email != null and email != ''">
					and t_enroll.email LIKE concat(concat('%',#{email}),'%')
				</if>
				<if test="certificateImage != null and certificateImage != ''"> 
					and t_match.match_name LIKE concat(concat('%',#{certificateImage}),'%')
				</if>
				
			</trim>
		</where>
	</select>



</mapper>